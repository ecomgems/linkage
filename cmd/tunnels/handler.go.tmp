package tunnels

import (
	"fmt"
	"github.com/ecomgems/linkage/utils/config"
	"github.com/urfave/cli/v2"
	"io"
	"log"
	"golang.org/x/crypto/ssh"
	"net"
)

func forward(localConn net.Conn, config *ssh.ClientConfig) {
	// Setup sshClientConn (type *ssh.ClientConn)
	sshClientConn, err := ssh.Dial("tcp", serverAddrString, config)
	if err != nil {
		log.Fatalf("ssh.Dial failed: %s", err)
	}

	// Setup sshConn (type net.Conn)
	sshConn, err := sshClientConn.Dial("tcp", remoteAddrString)

	// Copy localConn.Reader to sshConn.Writer
	go func() {
		_, err = io.Copy(sshConn, localConn)
		if err != nil {
			log.Fatalf("io.Copy failed: %v", err)
		}
	}()

	// Copy sshConn.Reader to localConn.Writer
	go func() {
		_, err = io.Copy(localConn, sshConn)
		if err != nil {
			log.Fatalf("io.Copy failed: %v", err)
		}
	}()
}

func TunnelCmdHandler(c *cli.Context) error {
	configFilePath := c.Path("config")
	configData, err := config.GetConfiguration(configFilePath)
	if err != nil {
		return err
	}

	var config *ssh.ClientConfig
	for _, serverConfig := range configData.Servers {

		if serverConfig.KeyFile == "" {
			config = &ssh.ClientConfig{
				User: serverConfig.User,
				Auth: []ssh.AuthMethod{
					ssh.Password(serverConfig.Password),
				},
			}
		} else {
			config = &ssh.ClientConfig{
				User: serverConfig.User,
				Auth: []ssh.AuthMethod{
					ssh.PublicKey(serverConfig.KeyFile),
				},
			}
		}

		// Setup localListener (type net.Listener)
		localListener, err := net.Listen("tcp", serverConfig.Host)
		if err != nil {
			log.Fatalf("net.Listen failed: %v", err)
		}

		for {
			// Setup localConn (type net.Conn)
			localConn, err := localListener.Accept()
			if err != nil {
				log.Fatalf("listen.Accept failed: %v", err)
			}
			go forward(localConn, config)
		}


		log.Println(serverConfig.Host)

		for _, tunnelConfig := range serverConfig.Tunnels {
			log.Println(
				fmt.Sprintf(
					"Tunnel %d:%s:%d over %s",
					tunnelConfig.RemotePort,
					tunnelConfig.RemoteHost,
					tunnelConfig.LocalPort,
					serverConfig.Host,
				),
			)

		}
	}

	return nil
}
